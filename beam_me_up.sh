#!/bin/sh
# vim: foldmethod=marker

TARGET_DIR="$HOME/.config/zsh"

mkdir -p "$TARGET_DIR"

conflict_check() {
    test -f "$TARGET_DIR/$1" && {
        echo "I'm not overwriting your $1"
        exit 1
    }
}

conflict_check ".zshrc"
conflict_check ".zprofile"

# zshrc dump {{{
echo "" \
    | base64 -d > "$TARGET_DIR/.zshrc"
# }}}

# zprofile dump {{{
which nvim && EDITOR="$(which nvim)"
echo "
export EDITOR=\"$EDITOR\"
export VISUAL=\"$EDITOR\"

export PATH=\"$PATH:$HOME/bin:$HOME/.local/bin:.\"

export ZDOTDIR=\"$TARGET_DIR\"
" > "$TARGET_DIR/.zprofile"
# }}}

ln -s "$TARGET_DIR/.zprofile" "$HOME/.zprofile"
chsh -s `which zsh`

